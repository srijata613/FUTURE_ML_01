# -*- coding: utf-8 -*-
"""Superstore Sales Forecasting

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/119r2KmEcIQhGkTGHKcA-XD7OHSSikrFU
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from prophet import Prophet
from prophet.make_holidays import make_holidays_df
import holidays
import os
from google.colab import files

print("--- PHASE 0: ENVIRONMENT SETUP ---")
uploaded = files.upload()
FILE_NAME = list(uploaded.keys())[0] # Get the name of the first uploaded file
FILE_PATH = FILE_NAME

print(f"\nSuccessfully uploaded: {FILE_PATH}")
# -------------------------------

print("\n--- PHASE 1: DATA ACQUISITION & FOCUS ---")

# 1. Load Data
try:
    df = pd.read_csv(FILE_PATH, encoding='latin-1')
except Exception as e:
    print(f"Error loading file: {e}. Check the file name and path.")
    # Create a dummy DataFrame if loading fails to allow script execution to continue
    df = pd.DataFrame({'Order Date': [], 'Sales': []})

# 2. Convert Date to Datetime
df['Order Date'] = pd.to_datetime(df['Order Date'])

# 3. Select relevant columns
df_ts = df[['Order Date', 'Sales']].copy()

print(f"Raw data loaded. Shape: {df_ts.shape}")
print(f"Time range: {df_ts['Order Date'].min().date()} to {df_ts['Order Date'].max().date()}")

print("\n--- PHASE 2: CLEANING AND PREPROCESSING ---")

# 1. Set 'Order Date' as index
df_ts.set_index('Order Date', inplace=True)

# 2. Resample (Aggregate) to Daily frequency ('D')
# Sum all sales for each day
df_daily = df_ts.resample('D').sum().reset_index()

# 3. Rename columns for Prophet: 'ds' (Date) and 'y' (Sales)
df_prophet = df_daily.rename(columns={'Order Date': 'ds', 'Sales': 'y'})

# 4. Handle missing dates (where no sales occurred)
# This fills gaps created by the aggregation step with 0, a critical step
df_prophet['y'] = df_prophet['y'].fillna(0)

print("Prophet-ready data (ds, y) head:")
print(df_prophet.head())

print("\n--- PHASE 3: FEATURE ENGINEERING (HOLIDAYS) ---")

# Determine the span of your data
START_DATE = df_prophet['ds'].min().year
END_DATE = df_prophet['ds'].max().year + 1 # Include the end year + 1 for safety

# Create a list of major US holidays for the entire time span
us_holidays = holidays.US(years=range(START_DATE, END_DATE))

# Convert to Prophet's required format
holidays_df = pd.DataFrame(us_holidays.items(), columns=['ds', 'holiday'])
holidays_df['ds'] = pd.to_datetime(holidays_df['ds'])

# Filter for only major, non-weekend holidays that likely impact sales
major_holidays = [
    'Christmas Day', 'New Year\'s Day', 'Thanksgiving', 'Black Friday' # Black Friday is often included manually
]
# For a quick start, let's keep it simple with all US holidays generated by the library
holidays_df = holidays_df[holidays_df['holiday'].str.contains('Christmas|New Year|Thanksgiving|Independence')]

print(f"Generated {len(holidays_df)} holiday dates for the model.")
print(holidays_df.tail())

print("\n--- PHASE 4: MODELING AND FORECASTING ---")

# 1. Initialize the Prophet model
m = Prophet(
    yearly_seasonality=True,
    weekly_seasonality=True,
    daily_seasonality=False, # Daily seasonality is usually off for daily-aggregated data
    holidays=holidays_df,
    seasonality_mode='multiplicative', # Good for retail where fluctuations scale with sales
    changepoint_prior_scale=0.05 # Adjust this for sensitivity to trend changes
)

# 2. Fit the model to your historical data
m.fit(df_prophet)

# 3. Generate Future Dates (365 days forecast)
FUTURE_DAYS = 365
future = m.make_future_dataframe(periods=FUTURE_DAYS)

print(f"Generating forecast for {FUTURE_DAYS} days starting after {df_prophet['ds'].max().date()}...")

# 4. Predict Sales
forecast = m.predict(future)

print("\nForecast columns (ds, yhat, yhat_lower, yhat_upper) tail:")
print(forecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail())

# Optional: Plot the components for analysis
fig_comp = m.plot_components(forecast)
plt.show() # Uncomment in Colab to see the plot

print("\n--- PHASE 5: EXPORTING RESULTS FOR POWER BI ---")

# 1. Merge historical actuals (ds, y) with the full forecast dataframe
final_results = pd.merge(
    df_prophet[['ds', 'y']],
    forecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']],
    on='ds',
    how='outer' # Keep all rows (historical and future)
)


# 3. Sort by date and reset index
final_results.sort_values(by='ds', inplace=True)
final_results.reset_index(drop=True, inplace=True)

# 4. Export the combined results
OUTPUT_FILE = 'prophet_forecast_output.csv'
final_results.to_csv(OUTPUT_FILE, index=False)

print(f"SUCCESS: Data exported to {OUTPUT_FILE}")
print("You can now download this file from Colab and import it into Power BI.")
print("\nFinal Merged Data Head (Historical):")
print(final_results.head())
print("\nFinal Merged Data Tail (Forecast):")
print(final_results.tail())

# Optional: Plot the final result using Matplotlib for verification
plt.figure(figsize=(12, 6))
plt.plot(final_results['ds'], final_results['y'], label='Actual Sales (y)', color='#0d9488')
plt.plot(final_results['ds'], final_results['yhat'], label='Forecast (yhat)', color='#1d4ed8')
plt.fill_between(final_results['ds'], final_results['yhat_lower'], final_results['yhat_upper'], alpha=0.2, color='#1d4ed8', label='80% Confidence Interval')
plt.title('Superstore Sales: Historical Data and 1-Year Forecast')
plt.xlabel('Date')
plt.ylabel('Sales')
plt.legend()
plt.grid(True, linestyle='--', alpha=0.6)
plt.show()